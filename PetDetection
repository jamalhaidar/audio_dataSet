{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "qQl59mcIVsRK"
      },
      "outputs": [],
      "source": [
        "import keras\n",
        "from keras.layers import Activation, Dense, Dropout, Conv2D, \\\n",
        "                         Flatten, MaxPooling2D\n",
        "from keras.layers import LeakyReLU\n",
        "from keras.models import Sequential\n",
        "import librosa\n",
        "import librosa.display\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import random\n",
        "import os\n",
        "import warnings\n",
        "import requests\n",
        "import tensorflow as tf\n",
        "import pickle\n",
        "import math"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eo7guZQkaoGG",
        "outputId": "860c5944-6a6a-437b-91d9-e11e3fd0c827"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "#importing required datasets\n",
        "from google.colab import drive\n",
        "import os\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "data_syn = '/content/drive/My Drive/synthetic_data/synthetic/'\n",
        "data_pub = '/content/drive/My Drive/public_data/public/'\n",
        "data_cd =  '/content/drive/My Drive/cats_dogs/cd/'\n",
        "\n",
        "\n",
        "\n",
        "# Useful links : \n",
        "# https://github.com/turpaultn/DESED\n",
        "# https://dcase.community/challenge2019/task-sound-event-detection-in-domestic-environments#description\n",
        "# Synthetic data uploaded in drive : \n",
        "# https://drive.google.com/drive/folders/1oeuUnOQzuFrCvs-OAplr6DunE4eynmM4?usp=sharing\n",
        "# Domestic Public daata in drive : \n",
        "# https://drive.google.com/drive/folders/1AIMY-L8n8VcncZ60nW4FZ4_J4dCQPEml?usp=sharing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "metadata": {
        "id": "xsHsyQ_YSr0J"
      },
      "outputs": [],
      "source": [
        "import csv\n",
        "import math\n",
        "rows = []\n",
        "with open(\"synthetic_dataset.csv\", 'r') as file:\n",
        "    csvreader = csv.reader(file)\n",
        "    header = next(csvreader)\n",
        "    for row in csvreader:\n",
        "        rows.append(row[0])\n",
        "\n",
        "\n",
        "\n",
        "audio_data = []\n",
        "dict1={'Speech':0,'Cat': 1,'Dog':2,'Alarm_bell_ringing':3,'Dishes':4,'Frying':5,'Blender':6,'Running_water':7,'Vacuum_cleaner':8,'Electric_shaver_toothbrush':9}\n",
        "for idx,i in enumerate(rows):\n",
        "    print(idx, end = ' \\n')\n",
        "    i = i.split('\\t')\n",
        "    size=float(i[2])-float(i[1])\n",
        "    # print(size, end = ' ')\n",
        "    mult=math.ceil(2.97/size)\n",
        "    # print(mult,  end = ' ')\n",
        "    y1, sr = librosa.load(data_syn+i[0],offset=float(i[1]),duration=size)\n",
        "    y = np.copy(y1)\n",
        "    # print(len(y),end = ' ')\n",
        "    for idx in range(mult-1):\n",
        "      y = np.concatenate((y,y1))\n",
        "    y = y[:int(2.97*sr)]\n",
        "    # print(len(y),end = ' ')\n",
        "    ps = librosa.feature.melspectrogram(y=y, sr=sr)\n",
        "    # print(ps.shape)\n",
        "    if ps.shape!=(128,128): continue\n",
        "    ps=librosa.power_to_db(ps)\n",
        "    audio_data.append([ps,dict1[i[3]]])\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(audio_data))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a3rvnpuLKttc",
        "outputId": "fcc83105-ee92-4670-fa68-5d0406644c51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6032\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "rows = []\n",
        "with open(\"public.tsv\", 'r') as file:\n",
        "    csvreader = csv.reader(file)\n",
        "    header = next(csvreader)\n",
        "    for row in csvreader:\n",
        "        rows.append(row[0])\n",
        "\n",
        "\n",
        "\n",
        "public_data = []\n",
        "dict1={'Speech':0,'Cat': 1,'Dog':2,'Alarm_bell_ringing':3,'Dishes':4,'Frying':5,'Blender':6,'Running_water':7,'Vacuum_cleaner':8,'Electric_shaver_toothbrush':9}\n",
        "for idx,i in enumerate(rows):\n",
        "    print(idx, end = ' \\n')\n",
        "    i = i.split('\\t')\n",
        "    size=float(i[2])-float(i[1])\n",
        "    # print(size, end = ' ')\n",
        "    mult=math.ceil(2.97/size)\n",
        "    # print(mult,  end = ' ')\n",
        "    y1, sr = librosa.load(data_pub+i[0],offset=float(i[1]),duration=size)\n",
        "    y = np.copy(y1)\n",
        "    # print(len(y),end = ' ')\n",
        "    for idx in range(mult-1):\n",
        "      y = np.concatenate((y,y1))\n",
        "    y = y[:int(2.97*sr)]\n",
        "    # print(len(y),end = ' ')\n",
        "    ps = librosa.feature.melspectrogram(y=y, sr=sr)\n",
        "    # print(ps.shape)\n",
        "    if ps.shape!=(128,128): continue\n",
        "    ps=librosa.power_to_db(ps)\n",
        "    public_data.append([ps,dict1[i[3]]])"
      ],
      "metadata": {
        "id": "qHGNwjsxyjpU"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from posixpath import split\n",
        "filenames1 = tf.io.gfile.glob(data_cd + '*')\n",
        "cd_data = []\n",
        "dict2 = {'c' : 1, 'd' : 2}\n",
        "for idx,i in enumerate(filenames1):\n",
        "    print(idx,  end = ' ')\n",
        "    y1, sr = librosa.load(i)\n",
        "    size= len(y1) / sr\n",
        "    print(size, end = ' ')\n",
        "    mult=math.ceil(2.97/size)\n",
        "    y = np.copy(y1)\n",
        "    print(len(y),end = ' ')\n",
        "    for idx in range(mult-1):\n",
        "      y = np.concatenate((y,y1))\n",
        "    y = y[:int(2.97*sr)]\n",
        "    print(len(y),end = ' ')\n",
        "    ps = librosa.feature.melspectrogram(y=y, sr=sr)\n",
        "    print(ps.shape)\n",
        "    if ps.shape!=(128,128): continue\n",
        "    ps=librosa.power_to_db(ps)\n",
        "    cd_data.append([ps,dict2[i.split('/')[-1][0]]])\n",
        "  "
      ],
      "metadata": {
        "id": "TKfAfQlaWp8t"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open('audio_file.pkl', 'wb') as file:\n",
        "    pickle.dump(audio_data, file)\n",
        "\n",
        "with open('public_file.pkl', 'wb') as file:\n",
        "    pickle.dump(public_data, file)\n",
        "\n",
        "with open('cd_file.pkl', 'wb') as file:\n",
        "    pickle.dump(cd_data, file)"
      ],
      "metadata": {
        "id": "-yFbxUYPoyfi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!cp 'audio_file.pkl' '/content/drive/My Drive/synthetic_data/'"
      ],
      "metadata": {
        "id": "OaDUGUNho4my"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!cp 'public_file.pkl' '/content/drive/My Drive/public_data/'"
      ],
      "metadata": {
        "id": "nNlt3qn10HJu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!cp 'cd_file.pkl' '/content/drive/My Drive/cats_dogs/'"
      ],
      "metadata": {
        "id": "n3Ubs6qPZeqK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "f_syn = open('/content/drive/My Drive/synthetic_data/audio_file.pkl','rb')\n",
        "f_pub = open('/content/drive/My Drive/public_data/public_file.pkl','rb')\n",
        "f_cd = open('/content/drive/My Drive/cats_dogs/cd_file.pkl','rb')\n",
        "\n",
        "audio_data = pickle.load(f_syn)\n",
        "public_data = pickle.load(f_pub)\n",
        "cd_data = pickle.load(f_cd)\n"
      ],
      "metadata": {
        "id": "ggVWDQW8ade4"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(audio_data))\n",
        "print(len(public_data))\n",
        "print(len(cd_data))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-EZOq_BDbQK6",
        "outputId": "e6b45902-1349-4634-ccd3-b196344f2905"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6032\n",
            "2765\n",
            "277\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pre_data = audio_data+public_data\n",
        "random.shuffle(pre_data)"
      ],
      "metadata": {
        "id": "guI1NWzAaI1B"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "final_data = []\n",
        "arr = [0]*10\n",
        "for a in pre_data:\n",
        "  if(arr[a[1]] <= 700):\n",
        "    arr[a[1]] += 1\n",
        "    final_data.append(a)\n",
        "    continue\n",
        "  if(a[1] == 1 or a[1] == 2):\n",
        "    arr[a[1]] += 1\n",
        "    final_data.append(a)\n",
        "  \n"
      ],
      "metadata": {
        "id": "bsOaYKjHboX3"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zLA6ukMzq4rq",
        "outputId": "423b7d9e-7a9c-47bc-f6f4-a543643301ac"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[701, 787, 957, 701, 701, 227, 624, 266, 300, 338]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "audio_data1 = final_data"
      ],
      "metadata": {
        "id": "v0-gqR7Obr2i"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "__EHnJSYSr0J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fa2b7c61-f01a-4222-a532-7362541c6519"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[701, 787, 957, 701, 701, 227, 624, 266, 300, 338]\n"
          ]
        }
      ],
      "source": [
        "X_train=[]\n",
        "y_train=[]\n",
        "X_test=[]\n",
        "y_test=[]\n",
        "\n",
        "label_ct = [0]*10\n",
        "\n",
        "def split(train,test):\n",
        "    for x in train:\n",
        "        X_train.append(x[0])\n",
        "        y_train.append(x[1])\n",
        "        label_ct[x[1]] += 1\n",
        "    for y in test:\n",
        "        X_test.append(y[0])\n",
        "        y_test.append(y[1])\n",
        "        label_ct[y[1]] += 1\n",
        "\n",
        "\n",
        "            \n",
        "random.shuffle(audio_data1)\n",
        "\n",
        "\n",
        "\n",
        "train = audio_data1[:8*len(audio_data1)//10]\n",
        "test = audio_data1[8*len(audio_data1)//10:]\n",
        "split(train,test)\n",
        "\n",
        "\n",
        "y_train=np.array(y_train)\n",
        "y_test=np.array(y_test)\n",
        "X_train=np.array(X_train)\n",
        "X_test=np.array(X_test)\n",
        "\n",
        "\n",
        "print(label_ct)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YP5nOKs4dQOO",
        "outputId": "3b35c9c3-ca99-45d4-901b-7cf7a5b96f89"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[8 2 8 ... 2 3 1]\n",
            "[9 2 8 ... 3 3 3]\n"
          ]
        }
      ],
      "source": [
        "print(y_train)\n",
        "print(y_test)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model 1"
      ],
      "metadata": {
        "id": "SSo8vhqcxmM5"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "id": "W_IcWwPVSr0K"
      },
      "outputs": [],
      "source": [
        "model = Sequential()\n",
        "input_shape=(128, 128, 1)\n",
        "\n",
        "model.add(Conv2D(24, (5, 5), strides=(1, 1), input_shape=input_shape))\n",
        "model.add(MaxPooling2D((4, 2), strides=(4, 2)))\n",
        "model.add(Activation('relu'))\n",
        "\n",
        "model.add(Conv2D(48, (5, 5), padding=\"valid\"))\n",
        "model.add(MaxPooling2D((4, 2), strides=(4, 2)))\n",
        "model.add(Activation('relu'))\n",
        "\n",
        "model.add(Conv2D(48, (5, 5), padding=\"valid\"))\n",
        "model.add(Activation('relu'))\n",
        "\n",
        "model.add(Flatten())\n",
        "model.add(Dropout(rate=0.5))\n",
        "\n",
        "model.add(Dense(64))\n",
        "model.add(Activation('relu'))\n",
        "model.add(Dropout(rate=0.5))\n",
        "\n",
        "model.add(Dense(10))\n",
        "model.add(Activation('softmax'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4GogqQ3Wb8-X",
        "outputId": "698554a4-f097-4b0a-bd25-3043bc39c5de"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1121,)\n"
          ]
        }
      ],
      "source": [
        "print(y_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cUpGw6xMSr0K",
        "outputId": "32d21ecb-23aa-4733-8032-7d7487d2e7a9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 2.1448 - accuracy: 0.2328 - val_loss: 1.7037 - val_accuracy: 0.3916\n",
            "Epoch 2/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 1.6596 - accuracy: 0.4399 - val_loss: 1.6942 - val_accuracy: 0.4237\n",
            "Epoch 3/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 1.4461 - accuracy: 0.5287 - val_loss: 1.3933 - val_accuracy: 0.5397\n",
            "Epoch 4/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 1.3111 - accuracy: 0.5831 - val_loss: 1.1844 - val_accuracy: 0.6244\n",
            "Epoch 5/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 1.2049 - accuracy: 0.6229 - val_loss: 1.1842 - val_accuracy: 0.6325\n",
            "Epoch 6/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 1.1145 - accuracy: 0.6536 - val_loss: 1.0139 - val_accuracy: 0.6789\n",
            "Epoch 7/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 1.0437 - accuracy: 0.6811 - val_loss: 1.0490 - val_accuracy: 0.6878\n",
            "Epoch 8/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.9803 - accuracy: 0.6858 - val_loss: 1.0799 - val_accuracy: 0.6789\n",
            "Epoch 9/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.9135 - accuracy: 0.7123 - val_loss: 0.9551 - val_accuracy: 0.7172\n",
            "Epoch 10/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.8804 - accuracy: 0.7242 - val_loss: 0.9488 - val_accuracy: 0.6994\n",
            "Epoch 11/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.8380 - accuracy: 0.7318 - val_loss: 0.9572 - val_accuracy: 0.6940\n",
            "Epoch 12/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.7682 - accuracy: 0.7534 - val_loss: 1.0052 - val_accuracy: 0.6949\n",
            "Epoch 13/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.7584 - accuracy: 0.7588 - val_loss: 0.9061 - val_accuracy: 0.7306\n",
            "Epoch 14/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.6521 - accuracy: 0.7909 - val_loss: 0.8597 - val_accuracy: 0.7565\n",
            "Epoch 15/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.6576 - accuracy: 0.7811 - val_loss: 0.8381 - val_accuracy: 0.7609\n",
            "Epoch 16/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.6047 - accuracy: 0.8074 - val_loss: 0.8675 - val_accuracy: 0.7600\n",
            "Epoch 17/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.5814 - accuracy: 0.8090 - val_loss: 0.8149 - val_accuracy: 0.7654\n",
            "Epoch 18/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.5528 - accuracy: 0.8177 - val_loss: 0.8983 - val_accuracy: 0.7484\n",
            "Epoch 19/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.5690 - accuracy: 0.8161 - val_loss: 0.8707 - val_accuracy: 0.7449\n",
            "Epoch 20/20\n",
            "90/90 [==============================] - 2s 17ms/step - loss: 0.4976 - accuracy: 0.8411 - val_loss: 0.8825 - val_accuracy: 0.7502\n",
            "36/36 [==============================] - 0s 8ms/step - loss: 0.8825 - accuracy: 0.7502\n",
            "Test loss: 0.8825183510780334\n",
            "Test accuracy: 0.7502230405807495\n"
          ]
        }
      ],
      "source": [
        "model.compile(\n",
        "    optimizer=\"Adam\",\n",
        "    loss=\"sparse_categorical_crossentropy\",\n",
        "    metrics=['accuracy'])\n",
        "\n",
        "model.fit(\n",
        "    x=X_train, \n",
        "    y=y_train,\n",
        "    epochs=20,\n",
        "    batch_size=50,\n",
        "    validation_data= (X_test, y_test))\n",
        "\n",
        "score = model.evaluate(\n",
        "    x=X_test,\n",
        "    y=y_test)\n",
        "print('Test loss:', score[0])\n",
        "print('Test accuracy:', score[1])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "42fcvMsiokQE",
        "outputId": "fabc2998-07ce-48da-bbd2-8ce77b68f14d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 7 0 ... 1 3 0]\n",
            "[6 7 1 ... 1 3 0]\n"
          ]
        }
      ],
      "source": [
        "y_pred = np.argmax(model.predict(X_test),axis = 1)\n",
        "print(y_test)\n",
        "print(y_pred)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "conf_mat = np.zeros((10,10))\n",
        "for idx,i in enumerate(range(len(y_pred))):\n",
        "  conf_mat[y_test[idx],y_pred[idx]] += 1\n",
        "print(conf_mat)\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "fig, px = plt.subplots(figsize=(20, 14))\n",
        "px.matshow(conf_mat, cmap=plt.cm.YlOrRd, alpha=0.5)\n",
        "for i1 in range(conf_mat.shape[0]):\n",
        "  for j1 in range(conf_mat.shape[1]):\n",
        "    px.text(x=j1,y=i1,s=conf_mat[i1, j1], va='center', ha='center', size='xx-large')\n",
        "px.set_title(\"CONFUSION MATRIX\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "1g3yIDNSoNRg",
        "outputId": "f184b6c9-ddaa-411f-d35f-6f0c7e1dab25"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 88.   9.  17.   3.   7.   0.   8.   2.   2.   3.]\n",
            " [  4. 147.   7.   1.   0.   0.   4.   1.   0.   0.]\n",
            " [  8.   1. 157.   1.   3.   0.   2.   1.   0.   0.]\n",
            " [  3.   2.   4. 118.   3.   0.   1.   0.   1.   3.]\n",
            " [ 10.   1.   9.   2. 107.   2.  11.   4.   0.   1.]\n",
            " [  6.   1.   0.   0.   5.  21.   7.   7.   0.   1.]\n",
            " [  6.   0.   2.   1.   2.   0. 101.   3.  12.   5.]\n",
            " [  6.   0.   2.   1.   4.   6.   5.  21.   0.   2.]\n",
            " [  2.   1.   2.   1.   1.   0.  23.   4.  30.   1.]\n",
            " [  0.   0.   0.   4.   0.   3.  11.   0.   2.  51.]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.05, 'CONFUSION MATRIX')"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x1008 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "conf_mat1 = np.zeros((3,3))\n",
        "for idx,i in enumerate(range(len(y_pred))):\n",
        "  ii = y_test[idx]\n",
        "  jj = y_pred[idx]\n",
        "  if (ii == 1 or ii == 2): pass\n",
        "  else: ii = 0\n",
        "  if (jj == 1 or jj == 2): pass\n",
        "  else: jj = 0\n",
        "  conf_mat1[ii,jj] += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "fig, px = plt.subplots(figsize=(10, 5))\n",
        "px.matshow(conf_mat1, cmap=plt.cm.YlOrRd, alpha=0.5)\n",
        "for i1 in range(conf_mat1.shape[0]):\n",
        "  for j1 in range(conf_mat1.shape[1]):\n",
        "    px.text(x=j1,y=i1,s=conf_mat1[i1, j1], va='center', ha='center', size='xx-large')\n",
        "px.set_title(\"CONFUSION MATRIX\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 358
        },
        "id": "nTXN8J8ahK_o",
        "outputId": "c478a3c4-4c9f-4700-dc7a-ed16c4a7e4cd"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.05, 'CONFUSION MATRIX')"
            ]
          },
          "metadata": {},
          "execution_count": 42
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sm = np.sum(conf_mat1) \n",
        "acc = 1 - ((sm - np.sum(np.diag(conf_mat1)))/sm)\n",
        "print(acc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U-vTfmVNhPb4",
        "outputId": "18d90c38-021f-498a-d1fc-d8687a348b64"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9259589652096343\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model 2"
      ],
      "metadata": {
        "id": "0kUVd_p0xgJy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model1 = Sequential()\n",
        "input_shape=(128, 128, 1)\n",
        "\n",
        "model1.add(Conv2D(48, (5, 5), strides=(1, 1), input_shape=input_shape))\n",
        "model1.add(MaxPooling2D((4, 2), strides=(4, 2)))\n",
        "model1.add(LeakyReLU(alpha=0.1))\n",
        "\n",
        "model1.add(Conv2D(64, (5, 5), padding=\"valid\"))\n",
        "model1.add(MaxPooling2D((4, 2), strides=(4, 2)))\n",
        "model1.add(LeakyReLU(alpha=0.1))\n",
        "\n",
        "model1.add(Conv2D(64, (5, 5), padding=\"valid\"))\n",
        "model1.add(LeakyReLU(alpha=0.1))\n",
        "\n",
        "model1.add(Flatten())\n",
        "model1.add(Dropout(rate=0.5))\n",
        "\n",
        "model1.add(Dense(128))\n",
        "model1.add(LeakyReLU(alpha=0.1))\n",
        "model1.add(Dropout(rate=0.5))\n",
        "\n",
        "model1.add(Dense(10))\n",
        "model1.add(Activation('softmax'))"
      ],
      "metadata": {
        "id": "sdmDLbBIdDJC"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model1.compile(\n",
        "    optimizer=\"Adam\",\n",
        "    loss=\"sparse_categorical_crossentropy\",\n",
        "    metrics=['accuracy'])\n",
        "\n",
        "model1.fit(\n",
        "    x=X_train, \n",
        "    y=y_train,\n",
        "    epochs=20,\n",
        "    batch_size=50,\n",
        "    validation_data= (X_test, y_test))\n",
        "\n",
        "score1 = model1.evaluate(\n",
        "    x=X_test,\n",
        "    y=y_test)\n",
        "print('Test loss:', score1[0])\n",
        "print('Test accuracy:', score1[1])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DSsZudqKsUgK",
        "outputId": "4f7ef0f0-ac34-4354-f5df-8249720d89c5"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "90/90 [==============================] - 3s 29ms/step - loss: 2.3203 - accuracy: 0.3111 - val_loss: 1.4870 - val_accuracy: 0.4871\n",
            "Epoch 2/20\n",
            "90/90 [==============================] - 2s 24ms/step - loss: 1.4599 - accuracy: 0.5296 - val_loss: 1.2196 - val_accuracy: 0.6146\n",
            "Epoch 3/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 1.2570 - accuracy: 0.5967 - val_loss: 1.0520 - val_accuracy: 0.6655\n",
            "Epoch 4/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 1.1536 - accuracy: 0.6322 - val_loss: 1.0666 - val_accuracy: 0.6619\n",
            "Epoch 5/20\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 1.0836 - accuracy: 0.6525 - val_loss: 1.0111 - val_accuracy: 0.6744\n",
            "Epoch 6/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.9582 - accuracy: 0.6927 - val_loss: 0.9095 - val_accuracy: 0.7074\n",
            "Epoch 7/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.9130 - accuracy: 0.7034 - val_loss: 0.8600 - val_accuracy: 0.7467\n",
            "Epoch 8/20\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.8307 - accuracy: 0.7396 - val_loss: 0.9314 - val_accuracy: 0.7128\n",
            "Epoch 9/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.7510 - accuracy: 0.7563 - val_loss: 0.7788 - val_accuracy: 0.7556\n",
            "Epoch 10/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.7251 - accuracy: 0.7623 - val_loss: 0.9046 - val_accuracy: 0.7217\n",
            "Epoch 11/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.6876 - accuracy: 0.7739 - val_loss: 0.8243 - val_accuracy: 0.7493\n",
            "Epoch 12/20\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.6341 - accuracy: 0.7954 - val_loss: 0.7367 - val_accuracy: 0.7627\n",
            "Epoch 13/20\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.5884 - accuracy: 0.8067 - val_loss: 0.7220 - val_accuracy: 0.7886\n",
            "Epoch 14/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.5248 - accuracy: 0.8311 - val_loss: 0.9199 - val_accuracy: 0.7529\n",
            "Epoch 15/20\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.5511 - accuracy: 0.8179 - val_loss: 0.8308 - val_accuracy: 0.7663\n",
            "Epoch 16/20\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.5289 - accuracy: 0.8311 - val_loss: 0.8584 - val_accuracy: 0.7565\n",
            "Epoch 17/20\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.5159 - accuracy: 0.8375 - val_loss: 0.7797 - val_accuracy: 0.7743\n",
            "Epoch 18/20\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.4896 - accuracy: 0.8382 - val_loss: 0.8658 - val_accuracy: 0.7600\n",
            "Epoch 19/20\n",
            "90/90 [==============================] - 2s 23ms/step - loss: 0.4604 - accuracy: 0.8541 - val_loss: 0.8529 - val_accuracy: 0.7788\n",
            "Epoch 20/20\n",
            "90/90 [==============================] - 2s 22ms/step - loss: 0.5352 - accuracy: 0.8422 - val_loss: 1.0879 - val_accuracy: 0.7761\n",
            "36/36 [==============================] - 0s 7ms/step - loss: 1.0879 - accuracy: 0.7761\n",
            "Test loss: 1.0879428386688232\n",
            "Test accuracy: 0.7760927677154541\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = np.argmax(model1.predict(X_test),axis = 1)"
      ],
      "metadata": {
        "id": "ZMiSAMNscpv6"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conf_mat = np.zeros((10,10))\n",
        "for idx,i in enumerate(range(len(y_pred))):\n",
        "  conf_mat[y_test[idx],y_pred[idx]] += 1\n",
        "print(conf_mat)\n",
        "\n",
        "conf_mat1 = np.zeros((3,3))\n",
        "for idx,i in enumerate(range(len(y_pred))):\n",
        "  ii = y_test[idx]\n",
        "  jj = y_pred[idx]\n",
        "  if (ii == 1 or ii == 2): pass\n",
        "  else: ii = 0\n",
        "  if (jj == 1 or jj == 2): pass\n",
        "  else: jj = 0\n",
        "  conf_mat1[ii,jj] += 1\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "fig, px = plt.subplots(figsize=(10, 5))\n",
        "px.matshow(conf_mat1, cmap=plt.cm.YlOrRd, alpha=0.5)\n",
        "for i1 in range(conf_mat1.shape[0]):\n",
        "  for j1 in range(conf_mat1.shape[1]):\n",
        "    px.text(x=j1,y=i1,s=conf_mat1[i1, j1], va='center', ha='center', size='xx-large')\n",
        "px.set_title(\"CONFUSION MATRIX\", fontsize = 20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 532
        },
        "id": "uA1SF42UuFGl",
        "outputId": "9a486b8d-6fb0-40ea-df44-3cee99addfc7"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[116.   2.   6.   2.   4.   2.   1.   0.   2.   4.]\n",
            " [  4. 150.   7.   0.   3.   0.   0.   0.   0.   0.]\n",
            " [ 10.   9. 148.   0.   5.   0.   0.   0.   1.   0.]\n",
            " [  4.   5.   3. 119.   3.   0.   0.   0.   0.   1.]\n",
            " [ 16.   1.   8.   4. 109.   3.   3.   2.   0.   1.]\n",
            " [  8.   0.   1.   0.   8.  21.   4.   5.   0.   1.]\n",
            " [  8.   0.   0.   0.   5.   0.  99.   6.   6.   8.]\n",
            " [  5.   0.   0.   1.   8.   3.   0.  29.   0.   1.]\n",
            " [  5.   3.   4.   0.   0.   5.  14.   6.  24.   4.]\n",
            " [  2.   0.   0.   3.   0.   4.   3.   4.   0.  55.]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.05, 'CONFUSION MATRIX')"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sm = np.sum(conf_mat1) \n",
        "acc = 1 - ((sm - np.sum(np.diag(conf_mat1)))/sm)\n",
        "print(acc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xrEXAK-H1Fm8",
        "outputId": "c8b48603-8393-4ae1-8b2d-3c1c390e963a"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.935771632471008\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import Javascript\n",
        "from google.colab import output\n",
        "from base64 import b64decode\n",
        "from io import BytesIO\n",
        "!pip -q install pydub\n",
        "from pydub import AudioSegment\n",
        "\n",
        "RECORD = \"\"\"\n",
        "const sleep  = time => new Promise(resolve => setTimeout(resolve, time))\n",
        "const b2text = blob => new Promise(resolve => {\n",
        "  const reader = new FileReader()\n",
        "  reader.onloadend = e => resolve(e.srcElement.result)\n",
        "  reader.readAsDataURL(blob)\n",
        "})\n",
        "var record = time => new Promise(async resolve => {\n",
        "  stream = await navigator.mediaDevices.getUserMedia({ audio: true })\n",
        "  recorder = new MediaRecorder(stream)\n",
        "  chunks = []\n",
        "  recorder.ondataavailable = e => chunks.push(e.data)\n",
        "  recorder.start()\n",
        "  await sleep(time)\n",
        "  recorder.onstop = async ()=>{\n",
        "    blob = new Blob(chunks)\n",
        "    text = await b2text(blob)\n",
        "    resolve(text)\n",
        "  }\n",
        "  recorder.stop()\n",
        "})\n",
        "\"\"\"\n",
        "\n",
        "def record(sec=3):\n",
        "  display(Javascript(RECORD))\n",
        "  s = output.eval_js('record(%d)' % (sec*1000))\n",
        "  b = b64decode(s.split(',')[1])\n",
        "  audio = AudioSegment.from_file(BytesIO(b))\n",
        "  return audio"
      ],
      "metadata": {
        "id": "rVfSZb8Bfd9k"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib import pyplot as plt\n",
        "import numpy as np\n",
        "import scipy.io.wavfile\n",
        "import io\n",
        "import os\n",
        "\n",
        "!rm recording.wav\n",
        "\n",
        "if os.path.isfile('recording1.wav'):\n",
        "    print(\"wavefile exists, later part of the code uses 'recording.wav' as input speech\")\n",
        "else:\n",
        "    print(\"Recording the digits\")\n",
        "    wav = record(3) \n",
        "    wav = wav.set_frame_rate(22050)\n",
        "    sig=wav.get_array_of_samples()\n",
        "    samples=np.array(sig).T.astype(np.float32)\n",
        "    fp_arr = np.array(samples).T.astype(np.float32)\n",
        "    fp_arr /= np.iinfo(sig.typecode).max\n",
        "    scipy.io.wavfile.write('recording.wav', 22050, fp_arr) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "rNUAco2ff0Dk",
        "outputId": "c0eb2399-d27b-4842-d294-a7ce7c2b8bbd"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recording the digits\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "const sleep  = time => new Promise(resolve => setTimeout(resolve, time))\n",
              "const b2text = blob => new Promise(resolve => {\n",
              "  const reader = new FileReader()\n",
              "  reader.onloadend = e => resolve(e.srcElement.result)\n",
              "  reader.readAsDataURL(blob)\n",
              "})\n",
              "var record = time => new Promise(async resolve => {\n",
              "  stream = await navigator.mediaDevices.getUserMedia({ audio: true })\n",
              "  recorder = new MediaRecorder(stream)\n",
              "  chunks = []\n",
              "  recorder.ondataavailable = e => chunks.push(e.data)\n",
              "  recorder.start()\n",
              "  await sleep(time)\n",
              "  recorder.onstop = async ()=>{\n",
              "    blob = new Blob(chunks)\n",
              "    text = await b2text(blob)\n",
              "    resolve(text)\n",
              "  }\n",
              "  recorder.stop()\n",
              "})\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y1, sr = librosa.load('recording.wav')\n",
        "num = 65488\n",
        "px = np.zeros(max(0,num-len(y1)))\n",
        "y1 = np.concatenate((px,y1))\n",
        "\n",
        "print(len(y1),sr)\n",
        "\n",
        "ps = librosa.feature.melspectrogram(y=y1,sr=sr)\n",
        "ps = librosa.power_to_db(ps)\n",
        "ps = ps.reshape((1,128,128))\n",
        "print(ps.shape)\n",
        "\n",
        "\n",
        "y_pred = np.argmax(model.predict(ps),axis = 1)\n",
        "if(y_pred==1):\n",
        "  print('cat')\n",
        "elif(y_pred == 2):\n",
        "  print('dog')\n",
        "else:\n",
        "  print('other sound')\n",
        "\n",
        "y_pred1 = np.argmax(model1.predict(ps),axis = 1)\n",
        "if(y_pred1==1):\n",
        "  print('cat')\n",
        "elif(y_pred1 == 2):\n",
        "  print('dog')\n",
        "else:\n",
        "  print('other sound')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wVWswCj_gEAq",
        "outputId": "c905b105-48d2-48c3-ccdd-46aff3584c3e"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "65488 22050\n",
            "(1, 128, 128)\n",
            "other sound\n",
            "cat\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "name": "AudioClassificationForDomesticSound_2.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
